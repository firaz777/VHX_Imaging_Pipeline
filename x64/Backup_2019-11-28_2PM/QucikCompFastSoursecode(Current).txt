#include "stdio.h"
#include <SDKDDKVer.h>
#include "include/VHX4RC.h"
#include <list>
#include <iostream>
#include <string>
#include <array>


//takes X,Y,alpha,QuickCompSleep,ProccesingQuickcompTime,Path,ip

//to do:
//Make string parser thing for // folder path
//make function to calc. angle
//make a parser for the files
HWND dummyHWND = ::CreateWindowA("STATIC", "Remote Accsess Mode", WS_VISIBLE, 0, 0, 100, 100, NULL, NULL, NULL, NULL);


using namespace std;
#define WM_APP 0x8000
#define WM_APP_AUTO_FOCUS_COMPLETED (WM_APP + 1001)
#define WM_APP_XY_STAGE_INITIALIZE_THETA_ORIENTATION_COMPLETED (WM_APP + 1002)
#define WM_APP_QUICK_COMP_COMPLETED (WM_APP + 1000 )


void print(VHX4RC_RESULT result)
{


	string strLog;



	switch (result)
	{
	case VHX4RC_S_OK:
		strLog += ("VHX4RC_S_OK");
		break;
	case VHX4RC_E_COMMAND_FAILED:
		strLog += ("VHX4RC_E_COMMAND_FAILED");
		break;
	case VHX4RC_E_ALREADY_INITIALIZED:
		strLog += ("VHX4RC_E_ALREADY_INITIALIZED");
		break;
	case VHX4RC_E_NOT_INITIALIZED://d
		strLog += ("VHX4RC_E_NOT_INITIALIZED");
		break;
	case VHX4RC_E_COMM_ERROR:
		strLog += ("VHX4RC_E_COMM_ERROR");
		break;
	case VHX4RC_E_INVALID_ARGUMENT://d
		strLog += ("VHX4RC_E_INVALID_ARGUMENT");
		break;
	case VHX4RC_E_OUTOFMEMORY:
		strLog += ("VHX4RC_E_OUTOFMEMORY");
		break;
	case VHX4RC_E_PATH_NOT_FOUND://d
		strLog += ("VHX4RC_E_PATH_NOT_FOUND");
		break;
	case VHX4RC_E_SAVE_FILE_FAILED:
		strLog += ("VHX4RC_E_SAVE_FILE_FAILED");
		break;
	case VHX4RC_E_FILE_ALREADY_EXISTS:
		strLog += ("VHX4RC_E_FILE_ALREADY_EXISTS");
		break;
	case VHX4RC_E_INVALID_MODE:
		strLog += ("VHX4RC_E_INVALID_MODE");
		break;
	case VHX4RC_E_INVALID_STATE:
		strLog += ("VHX4RC_E_INVALID_STATE");
		break;
	case VHX4RC_E_Z_STAGE_NOTHING://?
		strLog += ("VHX4RC_E_Z_STAGE_NOTHING");
		break;
	case VHX4RC_E_Z_STAGE_DISCONNECTED://d
		strLog += ("VHX4RC_E_Z_STAGE_DISCONNECTED");
		break;
	case VHX4RC_E_INVALID_HANDLE:
		strLog += ("VHX4RC_E_INVALID_HANDLE");
		break;
	case VHX4RC_E_NOT_SUPPORT:
		strLog += ("VHX4RC_E_NOT_SUPPORT");
		break;
	case VHX4RC_E_OUTOFCOMPLIMIT:
		strLog += ("VHX4RC_E_OUTOFCOMPLIMIT");
		break;
	case VHX4RC_E_XY_STAGE_DISCONNECTED://d
		strLog += ("VHX4RC_E_XY_STAGE_DISCONNECTED");
		break;
	case VHX4RC_E_XY_STAGE_NOT_INITIALIZED://d
		strLog += ("VHX4RC_E_XY_STAGE_NOT_INITIALIZED");
		break;
	default:
		CString strValue;

		strLog = "Unknown";
		break;
	}
	std::cout << strLog + "\n";
}

int error = 0;
void errorout(VHX4RC_RESULT result)
{






	switch (result)
	{
	case VHX4RC_S_OK:
		
		break;
	case VHX4RC_E_COMMAND_FAILED:
		
		break;
	case VHX4RC_E_ALREADY_INITIALIZED:
		
		break;
	case VHX4RC_E_NOT_INITIALIZED://d
		error = 1;
		break;
	case VHX4RC_E_COMM_ERROR:
		
		break;
	case VHX4RC_E_INVALID_ARGUMENT://d
		error = 2;
		break;
	case VHX4RC_E_OUTOFMEMORY:
		
		break;
	case VHX4RC_E_PATH_NOT_FOUND://d
		error = 3;
		break;
	case VHX4RC_E_SAVE_FILE_FAILED:
		
		break;
	case VHX4RC_E_FILE_ALREADY_EXISTS:
		
		break;
	case VHX4RC_E_INVALID_MODE:
		
		break;
	case VHX4RC_E_INVALID_STATE:
		
		break;
	case VHX4RC_E_Z_STAGE_NOTHING://?
		
		break;
	case VHX4RC_E_Z_STAGE_DISCONNECTED://d
		error = 4;
		break;
	case VHX4RC_E_INVALID_HANDLE:
		
		break;
	case VHX4RC_E_NOT_SUPPORT:
		
		break;
	case VHX4RC_E_OUTOFCOMPLIMIT:
		
		break;
	case VHX4RC_E_XY_STAGE_DISCONNECTED://d
		error = 5;
		break;
	case VHX4RC_E_XY_STAGE_NOT_INITIALIZED://d
		error = 6;
		break;
	default:
		

		
		break;
	}

}


int main(int argc, char* argv[]) {
	//look for command line arguments
	printf("You have entered: %d arguments\n", argc);
	int X, Y,QuickCompSleep,ProccesingQucikCompTime;
	double alpha;
	string Path, ip;
	if (argc >= 8) {
		X = strtol(argv[1], nullptr, 0); //x
		Y = strtol(argv[2], nullptr, 0); //y
		alpha = atof(argv[3]); //multiplyer for wait time of stage movement
		QuickCompSleep = 1000*(strtol(argv[4], nullptr, 0)); //quick comp sleep(and by assostiation height) in sec
		ProccesingQucikCompTime = 1000 * (strtol(argv[5], nullptr, 0));//time required to procces the quic comp image(usually in the range of 8 to 12 seconds)
		Path = argv[6]; //path to save image
		ip = argv[7]; //ip of VHX unit
		printf("X: %d,Y: %d\n", X, Y);

	}
	else {
		printf("Defult\n");
		X = 0;
		Y = 0;
		alpha = 1;
		QuickCompSleep = 2000;
		ProccesingQucikCompTime = 12000;
		ip = "131.104.63.75";
		Path = "D:\\WorkTermBOLD\\MicroscopeOutput\\ScriptOut";
	}




	//intializing
	cout << Path;
	cout << "\n";
	CString strAddress = ip.c_str();
	printf("Connecting:");
	VHX4RC_RESULT result = VHX4RC_Init(strAddress);
	print(result);
	errorout(result);
	Sleep(1000);

	int cX, cY;
	VHX4RC_XYStageGetPos(&cX, &cY);
	int distance = ceil(sqrt(pow(cX - X, 2) + pow(cY - Y, 2)));
	int speed = 6808;
	int movetime;
	movetime = 1000 * (ceil(distance / speed))+1500 ;
	movetime = ceil(alpha * movetime);
	//
	//movetime=movetime*alpha

	printf("Moving XY Stage to Point");
	result = VHX4RC_XYStageMoveTo(X, Y);
	print(result);
	errorout(result);
	Sleep(movetime);
	
	
	//VHX4RC_GetAutoFocusAreaPosition(autofocusX, autofocusY);

	//for (unsigned int i = 0; i < 10; i++) {
		//printf("Well number: %d\n", i);
		//printf("Moving to Point:");
	int x = (X);
	int y = (Y);
	printf("Starting Quick Composition Mode:");
	result = VHX4RC_StartQuickCompMode();
	print(result);
	errorout(result);
	Sleep(100);
	printf("Start QuickComp:");
	result = VHX4RC_StartQuickComp(dummyHWND, WM_APP_QUICK_COMP_COMPLETED);
	print(result);
	errorout(result);
	Sleep(QuickCompSleep);
	//printf("2b. After 2s sleep");

	//filename here
	string filenameinit = Path;
	filenameinit = filenameinit + ".jpg";

	LPCSTR filename = filenameinit.c_str();
	printf("Stop QuickComp:");
	result = VHX4RC_StopQuickComp();
	print(result);
	errorout(result);
	Sleep(ProccesingQucikCompTime);
	printf("Save Image:");
	result = VHX4RC_SaveImageRemotePCA(0, filename);
	print(result);
	errorout(result);
	Sleep(100);
	printf("End Qucick Compostion Mode:");
	result= VHX4RC_StopQuickCompMode();
	print(result);
	errorout(result);
	//}

	long currentmode;

	VHX4RC_Exit(FALSE);
	VHX4RC_GetCurrentMode(&currentmode);
	Sleep(1000);
	if (error == 0){
		return (0);
	}
	else { return (error); }
}
//C:\Users\khanf\source\repos\testingrun\x64\Release\testingrun.exe